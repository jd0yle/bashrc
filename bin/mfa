#!/usr/bin/env node
(function () {
    "use strict";
    let exec = require("child_process").exec,
        providers = require("../etc/credentials/mfa.json");

    let getTimeLeft = function() {
        let sec = parseInt(new Date().getSeconds(), 10),
            timeLeft = Math.abs(sec - (Math.floor(((sec / 30)) + 1) * 30));
        return timeLeft;
    };

    let output = function () {
        let timeLeft = getTimeLeft(),
            line = " " + timeLeft + " ";

        if (timeLeft.toString().length < 2){
            line = " " + line;
        }

        for (let provider in providers) {
            if (providers.hasOwnProperty(provider)) {
                line += "  *  " + provider + ": " + providers[provider].lastToken;
            }
        }

        process.stdout.clearLine();
        process.stdout.cursorTo(0);
        process.stdout.write(line);
        process.stdout.cursorTo(process.stdout.columns);

        //exec("echo " + providers["aws"].lastToken + " | xclip -selection c", function (err, stdout) {
	exec("echo " + providers["aws"].lastToken + " | clip.exe", function (err, stdout) {
            if (err) {
                console.error("Problem with xclip");
            }
        });

    };

    let execOathTool = function (provider, callback) {
        callback = typeof callback === "function" ? callback : function () {};
        exec("oathtool --totp -b '" + providers[provider].secret + "'", function (err, stdout) {
            if (err) {
                throw(err);
            }
            callback(provider, stdout.replace(/\n/gi, ""));
        });
    };

    let saveToken = function (provider, token) {
        if (token !== providers[provider].lastToken) {
            providers[provider].lastToken = token;
        }
    };

    let getToken = function (provider) {
        execOathTool(provider, saveToken);
    };

    let createIntervals = function (provider) {
        getToken(provider);
        setInterval(function () {
            getToken(provider);
        }, 1000);
    };

    let exit = function () {
        process.nextTick(process.exit);
    };

   // exec("sudo ntpdate ntp.ubuntu.com", function (err) {
    exec("ls", function (err) {
        if (err) {
            throw(err);
        }

        Object.keys(providers).forEach(function (provider) {
            createIntervals(provider);
        });

        console.log("Token copied to X clipboard");
        output();
        setInterval(output, 500);
        setTimeout(exit, 60 * 1000);
    });
})();
